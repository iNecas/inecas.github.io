---
title: "Week 2019 01"
date: 2019-01-06T18:46:50+01:00
categories:
  - journal
---

Yes it's true. I've started a blog again. Besides random howtos that I come
across, every week I would like to add a journal entry, spent on anything that
I've found interesting during the last week. If you don't have anything better
to do (I hope you have), feel free to continue reading.

*** Blogging Technology

First of all, on the technology I've used for the blog itself. I was first
thinking about using Jekyll, as I already known the stuff. But then I've found
there is quite popular project in Go lang called [[https://gohugo.io/][Hugo]] (yes, the compulsory 'go'
in the name). Since I was just spending time playing around with Go, it seems
like a good way how to get in touch with it even more. The second reason for
choosing it is the native support for org-mode format time. And finally, it's
damn fast to use (basically once you've saved your post (or did any change in
the source), you already see the changes on the live server.

When I was playing with Hugo and org-mode format. I've found several cases where
the renderer was not very good. Funny enough, I was not the only one to notice,
and while I'm writing this, [[https://github.com/gohugoio/hugo/pull/5545][there
is a PR to change the org mode backend to more actively maintained one]]. This
article is build using this version.

*** Emacs Ecosystem

If you know org-mode, you probably already guessed that I'm an Emacs user. I've
started spending more time with Emacs configuration lately (basically after
discovering [[http://spacemacs.org/][Spacemacs]]). There have been several interesting topics I've came
across this week in Emacs space:

- [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] :: Emacs client for Microsoft's [[https://github.com/Microsoft/language-server-protocol/][Language Server Protocol]]. It's really
     nice to see this level of cooperation between text editors developers. I
     even made a first set of contributions there ([[https://github.com/emacs-lsp/lsp-mode/pull/585][updating Go lang LSP]] and
     [[https://github.com/emacs-lsp/lsp-ui/pull/216][fixing disabling of quick doc mode]]). I think we will hear more about this
     project in the future. I was particularly happy about the speed of
     maintainers response.

- [[https://github.com/NicolasPetton/Indium][Indium]] :: Bindings to JavaScript environments (Chrome Dev Tools + node),
     allows JS evaluation, REPL, debugger etc., directly against your code. I
     would like to use this project as a basis for being able to convert
     currently opened page to an org-mode task using org-capture. But it might
     be also pretty useful for JavaScript development: I need to give it more
     serious try in the future.

- [[https://github.com/tomterl/zshorg][ZSH config with literate programming]] :: I started tweaking more my zsh
     configuration to improve my productivity when working though my shell. I
     was thinking if there was a way how to structure it better than I do today
     (and perhaps even share some of it). That's how I came across this example
     of using org-mode to define the ZSH configuration: already put on my TODO
     list of things to give a try.

- [[https://orgmode.org/manual/Built_002din-Table-Editor.html#Built_002din-Table-Editor][org-mode table editor]] :: I've knew about org-mode table capabilities. However,
     this week it was the first time I've actually started using it to something
     useful. The main benefit of course is being able to keep the tables in
     plain text and ability to use the spreadsheets functions directly in your
     favorite editor.

*** Learning

There have been several videos I watched last week to expand my narrow view a
bit:

- [[https://learning.oreilly.com/videos/ultimate-go-programming/9780135261651][Ultimate Go Programming]] :: This has been my first end-to-end training course
     on Go lang. I has been quite dense for the beginning but even then quite
     enjoyable to watch. Unlike many others, Mr. Kennedy doesn't stop (or even
     start) at description of the syntax; he rather goes quite deeply on how the
     stuff works in the background. I found it quite useful to understand and it
     have helped me to grasp some Go ideas later. After going though
     [[https://tour.golang.org/][Tour of Go]], [[https://golang.org/doc/effective_go.html][Effective Go]] and [[https://golang.org/pkg/][docs for some core packages]], as well having my
     dev setup up and running, it looks like a good idea to re-watch this series
     more deeply to grasp everything the teacher has to say.
     [[https://github.com/ardanlabs/gotraining][The training materials]] look also well organized and I might get some
     inspiration from them when preparing for [[https://devconfcz2019.sched.com/event/JjF8/go-for-newbies][my Go for newbies workshop at
     DevConf]]. It was possible (and quite funny) to watch the video in 2x speed.

- [[https://learning.oreilly.com/library/view/oscon-2018-/9781492026075/video321424.html][Getting great with GraphQL: An intro to GraphQL servers (OSCON 2018)]] :: As one
     of benefits we have at Red Hat is a subscription to [[https://learning.oreilly.com][O'Reilly]] learning
     portal. Besides the endless list of technical books to read (if only it has
     been possible when I was learning programming) and trainings, it provides
     conference recordings as well. I've gave some talks shot and it was time
     well spent. The intro to GraphQL gave me exactly what I've expected from
     it's title: learn more about what are all this JS folks talking about.
     Suitable for 2x speed. It's live coding only talk (with source code [[https://github.com/eveporcello/oscon][available
     here]]) and it showed end-to-end example of how to build and use some GraphQL
     for fun and profit.

- [[https://learning.oreilly.com/videos/oscon-2018/9781492026075/9781492026075-video321401][Microservicing like a unicorn with Envoy, Istio, and Kubernetes (OSCON 2018]]) ::
     Fellow Red Hatter Christian Posta give some more detailed intro on Istio and
     Envoy and what the whole thing is about, together with some live demo of
     the whole thing. Pretty useful for somebody that has never seen this stuff
     before. I'm still not sure whether the whole microservices movement is the
     best thing that happened to us in 21st century, but it produces
     some interesting projects to help with distributed architectures and
     services integration; Istio is definitely on of them. I'm curious if that
     could help us with our deployment of Foreman and friends in multi-host
     (perhaps even containerized) environment. Suitable for watching in 2x
     speed.

- [[https://www.youtube.com/watch?v=Tng6Fox8EfI][The Scribe's Oath • Robert "Uncle Bob" Martin (GOTO 2017)]] :: I've not a talk from this guy
     for a while and came across this talk when searching for some popular talks
     of GOTO conf. I don't always agree with him, but he surely has some
     interesting thoughts to think about. He started with some brief history of
     live on Earth and put our civilization into some perspective (in very
     visual way). Then he talked about practices the scribes once used to have,
     just to get to the point of thinking about the practices developers have.
     He suggests as set of rules (oath) that the professional programmers should
     follow in order to have a right to call themselves programmers. Watch the
     talk (or read the comments below the video) for the list of rules. The last
     one "I will never stop learning and improving my craft﻿ (outside my work
     hours)" resonated particularly well with me. Suitable fro watching in 2x speed.

- [[https://www.imdb.com/title/tt2084970/][The Immitation Game (2014)]] :: Uncle Bob mentioned Alan Turing as the first
     real programmer. It made me think I don't know too much about this person,
     so I looked around to check for something to watch about him: the
     Immitation Game I've found. It was quite interesting story to watch, from
     the history as well as personality point of view. I didn't know the
     world hadn't known Turing as code breaker of Enigma until mid 80s. The
     whole intelligence story was captured quite nicely. Also they suggest
     Turing's work shortened the WWII by 2 years and saved 2 milions (people,
     not $$). It's quite extraordinary.

     With that, the end of Turin's life looks even more absurd. On one hand,
     despite of the problems the civilization has, it looks like some parts of
     the world learned from the past and I believe we still live in the best era
     so far. Let's not screw it up. I'm just sorry Turing didn't have more time
     on this earth to leverage the full potential of his brilliant mind.
     
That's been my week in a nutshell. If you have even more time and want to leave me some
comments, please do so [[https://twitter.com/iNecas/status/1082047892360179714][on Twitter]]. Wonderful 2nd week of 2019 to everyone.
